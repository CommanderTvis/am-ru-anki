#!/usr/bin/env python3
from __future__ import annotations
from typing import TYPE_CHECKING, AnyStr, Any

if TYPE_CHECKING:
    from _typeshed import *
import genanki
import mnemocards
import os
from mnemocards import ASSETS_DIR
from mnemocards.__main__ import main
from mnemocards.builders import get_builder
from mnemocards.builders.vocabulary_builder import VocabularyBuilder
from mnemocards.utils import get_hash_id, NoteID, generate_card_uuid

from tl import get_translation


def scrape_words_from_file(word_file: StrOrBytesPath, data_dir: StrOrBytesPath = "") -> list[str]:
    filename = os.path.join(data_dir, word_file)
    if not os.path.exists(filename):
        raise Exception("""File with words for TSV generator doesn't exist.
Default file name for words "words.txt".
To get words from file with differen name use key [--word-file WORD_FILE]""")

    with open(filename, "r+") as file:
        words_list = []
        for word in file:
            st = word.strip()
            if "#" not in st and st != "":
                words_list.append(st)
    return words_list


css: AnyStr = open(f"{ASSETS_DIR}/css/autogenerate.css").read()
CARD_MODEL: genanki.Model = genanki.Model(
    get_hash_id("725b5570-eb22-4ca5-a2b2-817e04514cde"),
    "Autogenerated vocabulary model",
    fields=[
        # Visible fields.
        {"name": "YourLanguageWord"},
        {"name": "LanguageYouLearnWord"},
        # Configuration fields.
        {"name": "CardColor"},
    ],
    templates=[
        {
            "name": "Vocabulary card",
            "qfmt": '''
                <style>
                    .card {
                        background: {{CardColor}};
                    }
                    .origin {
                        color: black;
                    }
                    .synonyms .line_2 {
                        color: #0000;
                    }
                </style>
                <div class="origin word">{{YourLanguageWord}}</div>
            ''',
            "afmt": '''
                <style>
                    .card {
                        background: {{CardColor}};
                    }
                    .origin {
                        color: black;
                    }
                    .destination {
                        color: black;
                    }
                </style>
                <div class="origin word">{{YourLanguageWord}}</div>
                <hr>
                <div class="destination word">{{LanguageYouLearnWord}}</div>
            ''',
        },
        {
            "name": "Vocabulary card (reversed)",
            "qfmt": '''
                <style>
                    .card {
                        background: {{CardColor}};
                    }
                    .destination {
                        color: black;
                    }
                    .definitions .line_1{
						color: #0000
					}
		            .definitions .line_2{
						color: #0000
				    }
                </style>
                <div class="destination word">{{LanguageYouLearnWord}}</div>
            ''',
            "afmt": '''
                <style>
                    .card {
                        background: {{CardColor}};
                    }
                    .origin {
                        color: black;
                    }
                    .destination {
                        color: black;
                    }
                </style>
                <div class="destination word">{{LanguageYouLearnWord}}</div>
                <hr>
                <div class="origin word">{{YourLanguageWord}}</div>
            ''',
        },
    ],
    css=css,
)


class AutogenerateBuilder(VocabularyBuilder, object):
    def __init__(self):
        super().__init__()

    @staticmethod
    def parse_src_to_settings(data_dir: StrOrBytesPath, src) -> dict[str, Any]:
        settings = {"color": src.get("card_color", "#f5f5f5"),
                    "filename": os.path.join(data_dir, src["file"]),
                    "one_translation": src.get("one_translation", False),
                    "card_properties": src.get("card_properties", None), "tags": []}

        if src.get("card_properties", None):
            settings["tags"] = src["card_properties"].get("tags", [])

        return settings

    @staticmethod
    def build_cards_from_words(settings: dict[str, Any]) -> list[dict[str, Any]]:
        words = scrape_words_from_file(settings["filename"])
        translations = get_translation(words)

        cards = []
        for idx, trans in enumerate(translations):
            if trans is not None:
                cards.append({"card_id": str(generate_card_uuid(trans)), "ylw": words[idx], "lylw": trans})
        for card in cards:
            card["tags"] = settings["tags"]

        return cards

    @staticmethod
    def build_notes_and_media(settings: dict[str, Any], cards: list[dict[str, Any]]) -> tuple[list[NoteID], list]:
        notes = []
        for card in cards:
            if settings["one_translation"]:
                card["yle"] = ""

            note = NoteID(
                card["card_id"],
                model=CARD_MODEL,
                fields=[
                    card["ylw"], card["lylw"], settings["color"]],
                tags=card["tags"])
            notes.append(note)
        return notes, []

    def build_cards(self, data_dir: StrOrBytesPath, src, deck_config, clean_audio: bool = True) -> \
            tuple[list[NoteID], list]:
        # Get data from config.
        settings = self.parse_src_to_settings(data_dir, src)
        builder = self.build_cards_from_words
        cards = builder(settings)
        notes, media = self.build_notes_and_media(settings, cards)
        return notes, media


# noinspection PyProtectedMember
mnemocards.builders._BUILDERS["autogenerate_am"] = AutogenerateBuilder()
main()
